name: C++ CI (Build, Test, Coverage)

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]

env:
  BUILD_TYPE: Release
  BUILD_DIR: ${{ github.workspace }}/build_ci
  TEST_RESULTS_DIR: ${{ github.workspace }}/test-results
  # VCPKG_TARGET_TRIPLET is still needed for the toolchain file
  VCPKG_TARGET_TRIPLET: x64-linux # For Ubuntu runner, use x64-linux

jobs:
  build-test-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read 
      checks: write 
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up C++ Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake lcov gcovr


    # THIS IS THE CRUCIAL CHANGE FOR VCPKG MANIFEST MODE
    # This action sets up VCPKG_ROOT and adds the toolchain file to CMake automatically
    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11 # Using a specific version for stability

    - name: Configure CMake
      working-directory: ${{ github.workspace }}
      run: |
        ls -la
        echo "Current working directory: $(pwd)"
        echo "GITHUB_WORKSPACE: ${{ github.workspace }}" 
        mkdir -p ${{ env.BUILD_DIR }}
        
        # When using lukka/run-vcpkg, the CMAKE_TOOLCHAIN_FILE is automatically
        # set in the environment or passed by the action itself.
        # You typically don't need to explicitly add -DCMAKE_TOOLCHAIN_FILE or -DVCPKG_TARGET_TRIPLET here
        # IF you rely fully on the action's environment setup.
        # However, explicitly setting it here provides clarity and robustness.
        cmake -S . -B ${{ env.BUILD_DIR }} \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
              -DCOVERAGE=ON \
              -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
              -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TARGET_TRIPLET }} # Still good practice to pass explicitly

    - name: Build Project (including tests)
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel $(nproc)

    - name: Create Test Results Directory
      run: mkdir -p ${{ env.TEST_RESULTS_DIR }}

    - name: Run Unit Tests and Generate JUnit XML
      run: |
        ctest --test-dir ${{ env.BUILD_DIR }} \
              --output-on-failure \
              --output-junit ${{ env.TEST_RESULTS_DIR }}/test-results.xml

      continue-on-error: true

    - name: Publish Test Results (Green/Amber Dot)
      uses: dorny/test-reporter@v1 
      if: always()
      with:
        name: Unit Test Results 
        path: ${{ env.TEST_RESULTS_DIR }}/*.xml
        reporter: java-junit 
        fail-on-error: true 


    - name: Generate Code Coverage Report
      run: |
        lcov --directory ${{ env.BUILD_DIR }} --zerocounters
        ctest --test-dir ${{ env.BUILD_DIR }}
        
        lcov --capture --directory ${{ env.BUILD_DIR }} --output-file coverage.info --ignore-errors mismatch 
        lcov --extract coverage.info "*/src/*" --output-file coverage_filtered.info # <--- FIX IS HERE
        
        genhtml coverage_filtered.info --output-directory ${{ env.BUILD_DIR }}/html_coverage

    - name: Display Coverage Summary
      run: |
        echo "## Code Coverage Summary" >> $GITHUB_STEP_SUMMARY
        # Generate the summary directly, filtering for src/ and excluding unreachable lines.
        # This will operate on the raw .gcda files in BUILD_DIR and apply the filter.
        # Remove the --lcov output to a file if nothing else consumes it.
        gcovr --print-summary --filter "src/" ${{ env.BUILD_DIR }} >> $GITHUB_STEP_SUMMARY
      if: always()

    - name: Upload HTML Coverage Report as Artifact (Optional)
      uses: actions/upload-artifact@v4
      with:
        name: html-coverage-report
        path: ${{ env.BUILD_DIR }}/html_coverage
        retention-days: 5

  docker-build-push:
    # This job will only run after 'build-test-coverage' succeeds
    needs: build-test-coverage
    runs-on: ubuntu-latest
    # Only run this job for pushes to the main/master branch, not for pull requests
    #iif: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKER_IMAGE_NAME }}:${{ github.sha }}